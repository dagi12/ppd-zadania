data Moto = Skoda | Audi | Seat | Bugatti | Fiat deriving (Show)
data Country = Czechy | Niemcy | Hiszpania | Francja | Włochy deriving (Show)

motoCountry  :: Moto -> Country

motoCountry m = case m of
  Skoda -> Czechy
  Audi -> Niemcy
  Seat -> Hiszpania
  Bugatti -> Francja
  Fiat -> Włochy

motoSpeed :: Moto -> Integer
motoSpeed m = case m of
  Skoda -> 45
  Audi -> 58
  Seat -> 12
  Bugatti -> 29
  Fiat -> 45

data Tree a = Empty | Node a (Tree a) (Tree a)
t :: Tree Int
t = Node 1
  (Node 2 
    (Node 4 Empty Empty)
    (Node 5 Empty (Node 8 Empty Empty)))
  (Node 3 
    (Node 6 Empty (Node 9 Empty Empty))
    (Node 7 Empty Empty))

r :: Tree Char
r = Node 'a'
  (Node 'b'
    Empty 
    (Node 'd' 
      (Node 'f' Empty Empty)
      Empty ))
  ( Node 'c'
    (Node 'e' 
      Empty 
      (Node 'g' Empty Empty ))
    Empty)

preorder :: Tree a -> [a]
preorder Empty = []
preorder (Node a l r) = [a] ++ preorder l ++ preorder r

inorder :: Tree a -> [a]
inorder Empty = []
inorder (Node a l r) = inorder l ++ [a] ++ inorder r

postorder :: Tree a -> [a]
postorder Empty = []
postorder (Node a l r) = postorder l ++ postorder r ++ [a]

treeMemberPreorder Empty x = False
treeMemberPreorder (Node a l r) x =
  | a == x = True
  | otherwise = treeMemberPreorder l x || treeMemberPreorder r x

treeMemberInorder Empty x = False
treeMemberInorder (Node a l r) x =
  | treeMemberInorder l x
  | a == x = True
  | treeMemberInorder r x
  | otherwise = False

treeMemberPostorder Empty x = False
treeMemberPostorder (Node a l r) x =
  | treeMemberPostorder l x
  | a == x = True
  | treeMemberPostorder r x
  | otherwise = False


